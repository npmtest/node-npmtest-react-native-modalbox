{"/home/travis/build/npmtest/node-npmtest-react-native-modalbox/test.js":"/* istanbul instrument in package npmtest_react_native_modalbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-modalbox/lib.npmtest_react_native_modalbox.js":"/* istanbul instrument in package npmtest_react_native_modalbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_modalbox = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_modalbox = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-modalbox/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-modalbox && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_modalbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_modalbox\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_modalbox.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_modalbox.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_modalbox.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_modalbox.__dirname + '/lib.npmtest_react_native_modalbox.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-modalbox/node_modules/react-native-modalbox/index.js":"'use strict';\n\nvar React = require('react');\nvar {\n  View,\n  StyleSheet,\n  PanResponder,\n  Animated,\n  TouchableWithoutFeedback,\n  Dimensions,\n  Easing,\n  BackAndroid,\n  Platform,\n} = require('react-native');\n\nvar screen = Dimensions.get('window');\n\nvar styles = StyleSheet.create({\n\n  wrapper: {\n    backgroundColor: \"white\"\n  },\n\n  transparent: {\n    backgroundColor: 'rgba(0,0,0,0)'\n  },\n\n  absolute: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n\n});\n\nvar ModalBox = React.createClass({\n\n  propTypes: {\n    isOpen: React.PropTypes.bool,\n    isDisabled: React.PropTypes.bool,\n    startOpen: React.PropTypes.bool,\n    backdropPressToClose: React.PropTypes.bool,\n    swipeToClose: React.PropTypes.bool,\n    swipeThreshold: React.PropTypes.number,\n    swipeArea: React.PropTypes.number,\n    position: React.PropTypes.string,\n    entry: React.PropTypes.string,\n    backdrop: React.PropTypes.bool,\n    backdropOpacity: React.PropTypes.number,\n    backdropColor: React.PropTypes.string,\n    backdropContent: React.PropTypes.element,\n    animationDuration: React.PropTypes.number,\n    backButtonClose: React.PropTypes.bool,\n\n    onClosed: React.PropTypes.func,\n    onOpened: React.PropTypes.func,\n    onClosingState: React.PropTypes.func,\n  },\n\n  getDefaultProps: function () {\n    return {\n      startOpen: false,\n      backdropPressToClose: true,\n      swipeToClose: true,\n      swipeThreshold: 50,\n      position: \"center\",\n      backdrop: true,\n      backdropOpacity: 0.5,\n      backdropColor: \"black\",\n      backdropContent: null,\n      animationDuration: 400,\n      backButtonClose: false\n    };\n  },\n\n  getInitialState: function () {\n    var position = this.props.entry === 'top' ? -screen.height : screen.height;\n    return {\n      position: this.props.startOpen ? new Animated.Value(0) : new Animated.Value(position),\n      backdropOpacity: new Animated.Value(0),\n      isOpen: this.props.startOpen,\n      isAnimateClose: false,\n      isAnimateOpen: false,\n      swipeToClose: false,\n      height: screen.height,\n      width: screen.width,\n      containerHeight: screen.height,\n      containerWidth: screen.width,\n      isInitialized: false\n    };\n  },\n\n  onBackPress () {\n      this.close()\n      return true\n  },\n\n  componentWillMount: function() {\n    this.createPanResponder();\n    this.handleOpenning(this.props);\n\n  },\n\n  componentWillReceiveProps: function(props) {\n    this.handleOpenning(props);\n  },\n\n  handleOpenning: function(props) {\n    if (typeof props.isOpen == \"undefined\") return;\n    if (props.isOpen)\n      this.open();\n    else\n      this.close();\n  },\n\n  /****************** ANIMATIONS **********************/\n\n  /*\n   * Open animation for the backdrop, will fade in\n   */\n  animateBackdropOpen: function() {\n    if (this.state.isAnimateBackdrop) {\n      this.state.animBackdrop.stop();\n      this.state.isAnimateBackdrop = false;\n    }\n\n    this.state.isAnimateBackdrop = true;\n    this.state.animBackdrop = Animated.timing(\n      this.state.backdropOpacity,\n      {\n        toValue: 1,\n        duration: this.props.animationDuration\n      }\n    );\n    this.state.animBackdrop.start(() => {\n      this.state.isAnimateBackdrop = false;\n    });\n  },\n\n  /*\n   * Close animation for the backdrop, will fade out\n   */\n  animateBackdropClose: function() {\n    if (this.state.isAnimateBackdrop) {\n      this.state.animBackdrop.stop();\n      this.state.isAnimateBackdrop = false;\n    }\n\n    this.state.isAnimateBackdrop = true;\n    this.state.animBackdrop = Animated.timing(\n      this.state.backdropOpacity,\n      {\n        toValue: 0,\n        duration: this.props.animationDuration\n      }\n    );\n    this.state.animBackdrop.start(() => {\n      this.state.isAnimateBackdrop = false;\n    });\n  },\n\n  /*\n   * Stop opening animation\n   */\n  stopAnimateOpen: function() {\n    if (this.state.isAnimateOpen) {\n      if (this.state.animOpen) this.state.animOpen.stop();\n      this.state.isAnimateOpen = false;\n    }\n  },\n\n  /*\n   * Open animation for the modal, will move up\n   */\n  animateOpen: function() {\n    this.stopAnimateClose();\n\n    // Backdrop fadeIn\n    if (this.props.backdrop)\n      this.animateBackdropOpen();\n\n    this.state.isAnimateOpen = true;\n\n    requestAnimationFrame(() => {\n      // Detecting modal position\n      this.state.positionDest = this.calculateModalPosition(this.state.containerHeight, this.state.containerWidth);\n\n      this.state.animOpen = Animated.timing(\n        this.state.position,\n        {\n          toValue: this.state.positionDest,\n          duration: this.props.animationDuration,\n          easing: Easing.elastic(0.8)\n        }\n      );\n      this.state.animOpen.start(() => {\n        this.state.isAnimateOpen = false;\n        this.state.isOpen = true;\n        if (this.props.onOpened) this.props.onOpened();\n      });\n    })\n\n  },\n\n  /*\n   * Stop closing animation\n   */\n  stopAnimateClose: function() {\n    if (this.state.isAnimateClose) {\n      if (this.state.animClose) this.state.animClose.stop();\n      this.state.isAnimateClose = false;\n    }\n  },\n\n  /*\n   * Close animation for the modal, will move down\n   */\n  animateClose: function() {\n    this.stopAnimateOpen();\n\n    // Backdrop fadeout\n    if (this.props.backdrop)\n      this.animateBackdropClose();\n\n    this.state.isAnimateClose = true;\n    this.state.animClose = Animated.timing(\n      this.state.position,\n      {\n        toValue: this.props.entry === 'top' ? -this.state.containerHeight : this.state.containerHeight,\n        duration: this.props.animationDuration\n      }\n    );\n    this.state.animClose.start(() => {\n      this.state.isAnimateClose = false;\n      this.state.isOpen = false;\n      this.setState({});\n      if (this.props.onClosed) this.props.onClosed();\n    });\n  },\n\n  /*\n   * Calculate when should be placed the modal\n   */\n  calculateModalPosition: function(containerHeight, containerWidth) {\n    var position = 0;\n\n    if (this.props.position == \"bottom\") {\n      position = containerHeight - this.state.height;\n    }\n    else if (this.props.position == \"center\") {\n      position = containerHeight / 2 - this.state.height / 2;\n    }\n    // Checking if the position >= 0\n    if (position < 0) position = 0;\n    return position;\n  },\n\n  /*\n   * Create the pan responder to detect gesture\n   * Only used if swipeToClose is enabled\n   */\n  createPanResponder: function() {\n    var closingState = false;\n    var inSwipeArea  = false;\n\n    var onPanRelease = (evt, state) => {\n      if (!inSwipeArea) return;\n      inSwipeArea = false;\n      if (this.props.entry === 'top' ? -state.dy > this.props.swipeThreshold : state.dy > this.props.swipeThreshold)\n        this.animateClose();\n      else\n        this.animateOpen();\n    };\n\n    var animEvt = Animated.event([null, {customY: this.state.position}]);\n\n    var onPanMove = (evt, state) => {\n      var newClosingState = this.props.entry === 'top' ? -state.dy > this.props.swipeThreshold : state.dy > this.props.swipeThreshold;\n      if (this.props.entry === 'top' ? state.dy > 0 : state.dy < 0) return;\n      if (newClosingState != closingState && this.props.onClosingState)\n        this.props.onClosingState(newClosingState);\n      closingState = newClosingState;\n      state.customY = state.dy + this.state.positionDest;\n\n      animEvt(evt, state);\n    };\n\n    var onPanStart = (evt, state) => {\n      if (!this.props.swipeToClose || this.props.isDisabled || (this.props.swipeArea && (evt.nativeEvent.pageY - this.state.positionDest) > this.props.swipeArea)) {\n        inSwipeArea = false;\n        return false;\n      }\n      inSwipeArea = true;\n      return true;\n    };\n\n    this.state.pan = PanResponder.create({\n      onStartShouldSetPanResponder: onPanStart,\n      onPanResponderMove: onPanMove,\n      onPanResponderRelease: onPanRelease,\n      onPanResponderTerminate: onPanRelease,\n    });\n  },\n\n  /*\n   * Event called when the modal view layout is calculated\n   */\n  onViewLayout: function(evt) {\n    var height = evt.nativeEvent.layout.height;\n    var width = evt.nativeEvent.layout.width;\n\n    // If the dimensions are still the same we're done\n    if (height !== this.state.height) this.state.height = height;\n    if (width !== this.state.width) this.state.width = width;\n\n    if (this.onViewLayoutCalculated) this.onViewLayoutCalculated();\n  },\n\n  /*\n   * Event called when the container view layout is calculated\n   */\n  onContainerLayout: function(evt) {\n    var height = evt.nativeEvent.layout.height;\n    var width = evt.nativeEvent.layout.width;\n\n    // If the container size is still the same we're done\n    if (height == this.state.containerHeight && width == this.state.containerWidth) {\n      this.setState({ isInitialized: true });\n      return;\n    }\n\n    var modalPosition = this.calculateModalPosition(height, width);\n    var coords = {};\n\n    // Fixing the position if the modal was already open or an animation was in progress\n    if (this.state.isInitialized && (this.state.isOpen || this.state.isAnimateOpen || this.state.isAnimateClose)) {\n      var position = this.state.isOpen ? modalPosition : this.state.containerHeight;\n\n      // Checking if a animation was in progress\n      if (this.state.isAnimateOpen) {\n        position = modalPosition;\n        this.stopAnimateOpen();\n      } else if (this.state.isAnimateClose) {\n        position = this.state.containerHeight;\n        this.stopAnimateClose();\n      }\n      this.state.position.setValue(position);\n      coords = {positionDest: position};\n    }\n\n    this.setState({\n      isInitialized: true,\n      containerHeight: height,\n      containerWidth: width,\n      ...coords\n    });\n  },\n\n  /*\n   * Render the backdrop element\n   */\n  renderBackdrop: function(size) {\n    var backdrop  = [];\n\n    if (this.props.backdrop) {\n      backdrop = (\n        <TouchableWithoutFeedback onPress={this.props.backdropPressToClose ? this.close : null}>\n          <Animated.View style={[styles.absolute, size, {opacity: this.state.backdropOpacity}]}>\n            <View style={[styles.absolute, {backgroundColor:this.props.backdropColor, opacity: this.props.backdropOpacity}]}/>\n            {this.props.backdropContent || []}\n          </Animated.View>\n        </TouchableWithoutFeedback>\n      );\n    }\n\n    return backdrop;\n  },\n\n  /*\n   * Render the component\n   */\n  render: function() {\n    var visible     = this.state.isOpen || this.state.isAnimateOpen || this.state.isAnimateClose;\n    var size        = {height: this.state.containerHeight, width: this.state.containerWidth};\n    var offsetX     = (this.state.containerWidth - this.state.width) / 2;\n    var backdrop    = this.renderBackdrop(size);\n\n    if (!visible) return <View/>\n\n    return (\n      <View style={[styles.transparent, styles.absolute]} pointerEvents={'box-none'} onLayout={this.onContainerLayout}>\n        {backdrop}\n        <Animated.View\n         onLayout={this.onViewLayout}\n         style={[styles.wrapper, size, this.props.style, {transform: [{translateY: this.state.position}, {translateX: offsetX}]} ]}\n         {...this.state.pan.panHandlers}>\n          {this.props.children}\n        </Animated.View>\n      </View>\n    );\n  },\n\n  /****************** PUBLIC METHODS **********************/\n\n  open: function() {\n    if (this.props.isDisabled) return;\n    if (!this.state.isAnimateOpen && (!this.state.isOpen || this.state.isAnimateClose)) {\n      this.onViewLayoutCalculated = () => {\n        this.setState({});\n        this.animateOpen();\n        if(this.props.backButtonClose && Platform.OS === 'android') BackAndroid.addEventListener('hardwareBackPress', this.onBackPress)\n        delete this.onViewLayoutCalculated;\n      };\n      this.setState({isAnimateOpen : true});\n    }\n  },\n\n  close: function() {\n    if (this.props.isDisabled) return;\n    if (!this.state.isAnimateClose && (this.state.isOpen || this.state.isAnimateOpen)) {\n      this.animateClose();\n      if(this.props.backButtonClose && Platform.OS === 'android') BackAndroid.removeEventListener('hardwareBackPress', this.onBackPress)\n    }\n  }\n\n\n});\n\nmodule.exports = ModalBox;\n","/home/travis/build/npmtest/node-npmtest-react-native-modalbox/node_modules/react-native-modalbox/Example2/index.android.js":"require('./index.ios');\n","/home/travis/build/npmtest/node-npmtest-react-native-modalbox/node_modules/react-native-modalbox/Example2/index.ios.js":"'use strict';\n\nvar React   = require('react');\nvar Button  = require('react-native-button');\nvar Modal   = require('react-native-modalbox');\nvar Slider  = require('react-native-slider');\nvar window  = require('Dimensions').get('window');\n\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  ScrollView\n} = require('react-native');\n\nvar styles = StyleSheet.create({\n\n  wrapper: {\n    paddingTop: 50,\n    flex: 1\n  },\n\n  modal: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n\n  modal2: {\n    height: 230,\n    backgroundColor: \"#3B5998\"\n  },\n\n  modal3: {\n    height: 300,\n    width: 300\n  },\n\n  modal4: {\n    height: 300\n  },\n\n  btn: {\n    margin: 10,\n    backgroundColor: \"#3B5998\",\n    color: \"white\",\n    padding: 10\n  },\n\n  btnModal: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    width: 50,\n    height: 50,\n    backgroundColor: \"transparent\"\n  },\n\n  text: {\n    color: \"black\",\n    fontSize: 22\n  }\n\n});\n\nvar Example = React.createClass({\n\n  getInitialState: function() {\n    return {\n      isOpen: false,\n      isDisabled: false,\n      swipeToClose: true,\n      sliderValue: 0.3\n    };\n  },\n\n  openModal1: function(id) {\n    this.refs.modal1.open();\n  },\n\n  openModal2: function(id) {\n    this.refs.modal2.open();\n  },\n\n  openModal3: function(id) {\n    this.refs.modal3.open();\n  },\n\n  openModal4: function(id) {\n    this.refs.modal4.open();\n  },\n\n  openModal5: function(id) {\n    this.setState({isOpen: true});\n  },\n\n  closeModal5: function(id) {\n    this.setState({isOpen: false});\n  },\n\n  openModal6: function(id) {\n    this.refs.modal6.open();\n  },\n\n  toggleDisable: function() {\n    this.setState({isDisabled: !this.state.isDisabled});\n  },\n\n  toggleSwipeToClose: function() {\n    this.setState({swipeToClose: !this.state.swipeToClose});\n  },\n\n  onClose: function() {\n    console.log('Modal just closed');\n  },\n\n  onOpen: function() {\n    console.log('Modal just openned');\n  },\n\n  onClosingState: function(state) {\n    console.log('the open/close of the swipeToClose just changed');\n  },\n\n  renderList() {\n    var list = [];\n\n    for (var i=0;i<50;i++) {\n      list.push(<Text style={styles.text} key={i}>Elem {i}</Text>);\n    }\n\n    return list;\n  },\n\n  render: function() {\n\n    var BContent = <Button onPress={this.closeModal5} style={[styles.btn, styles.btnModal]}>X</Button>;\n\n    return (\n      <View style={styles.wrapper}>\n        <Button onPress={this.openModal1} style={styles.btn}>Basic modal</Button>\n        <Button onPress={this.openModal2} style={styles.btn}>Position top</Button>\n        <Button onPress={this.openModal3} style={styles.btn}>Position centered + backdrop + disable</Button>\n        <Button onPress={this.openModal4} style={styles.btn}>Position bottom + backdrop + slider</Button>\n        <Button onPress={this.openModal5} style={styles.btn}>Backdrop + backdropContent</Button>\n        <Button onPress={this.openModal6} style={styles.btn}>Position bottom + ScrollView</Button>\n\n        <Modal style={[styles.modal, styles.modal1]} ref={\"modal1\"} swipeToClose={this.state.swipeToClose} onClosed={this.onClose} onOpened={this.onOpen} onClosingState={this.onClosingState}>\n          <Text style={styles.text}>Basic modal</Text>\n          <Button onPress={this.toggleSwipeToClose} style={styles.btn}>Disable swipeToClose({this.state.swipeToClose ? \"true\" : \"false\"})</Button>\n        </Modal>\n\n        <Modal style={[styles.modal, styles.modal2]} backdrop={false}  position={\"top\"} ref={\"modal2\"}>\n          <Text style={[styles.text, {color: \"white\"}]}>Modal on top</Text>\n        </Modal>\n\n        <Modal style={[styles.modal, styles.modal3]} position={\"center\"} ref={\"modal3\"} isDisabled={this.state.isDisabled}>\n          <Text style={styles.text}>Modal centered</Text>\n          <Button onPress={this.toggleDisable} style={styles.btn}>Disable ({this.state.isDisabled ? \"true\" : \"false\"})</Button>\n        </Modal>\n\n        <Modal style={[styles.modal, styles.modal4]} position={\"bottom\"} ref={\"modal4\"}>\n          <Text style={styles.text}>Modal on bottom with backdrop</Text>\n          <Slider style={{width: 200}} value={this.state.sliderValue} onValueChange={(value) => this.setState({sliderValue: value})} />\n        </Modal>\n\n        <Modal isOpen={this.state.isOpen} onClosed={this.closeModal5} style={[styles.modal, styles.modal4]} position={\"center\"} backdropContent={BContent}>\n          <Text style={styles.text}>Modal with backdrop content</Text>\n        </Modal>\n\n        <Modal style={[styles.modal, styles.modal4]} position={\"bottom\"} ref={\"modal6\"} swipeArea={20}>\n          <ScrollView>\n            <View style={{width: window.width, paddingLeft: 10}}>\n              {this.renderList()}\n            </View>\n          </ScrollView>\n        </Modal>\n      </View>\n    );\n  }\n});\n\nAppRegistry.registerComponent('Example', () => Example);\n"}